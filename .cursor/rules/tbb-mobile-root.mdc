---
description: 
globs: 
alwaysApply: false
---
## Struktur Folder Utama yang Dianalisis (Fokus pada App)
`app/` — Kemungkinan besar merupakan direktori utama yang berisi kode sumber inti aplikasi Anda, termasuk komponen UI, logika bisnis, dan navigasi.
`components/` — Berisi komponen UI yang dapat digunakan kembali di seluruh aplikasi.
`ui/` — Sub-direktori yang mungkin berisi komponen UI yang lebih mendasar atau atomik, atau bagian dari sistem desain internal.
`constants/` — Digunakan untuk menyimpan nilai-nilai konstan yang digunakan di berbagai bagian aplikasi (misalnya, string, konfigurasi, palet warna).
`hooks/` — Berisi custom hooks untuk enkapsulasi dan penggunaan kembali logika stateful atau efek samping.
`app-example/` — Direktori ini kemungkinan adalah hasil dari pemindahan atau backup direktori app oleh skrip reset-project.js. Bisa berfungsi sebagai referensi atau titik awal.
`assets/` — Menyimpan semua aset statis aplikasi.
`fonts/` — Tempat untuk file font kustom.
`images/` — Tempat untuk file gambar dan ikon.
`scripts/` — Berisi skrip-skrip utilitas untuk membantu dalam proses pengembangan, build, atau tugas-tugas otomatis lainnya.

## Konvensi Penamaan File & Folder (Rekomendasi)
Agar IDE Cursor AI (dan pengembang lain) dapat bekerja secara optimal dan untuk menjaga konsistensi:

1. Folder:
Gunakan lowercase atau kebab-case (misalnya, components, app, ui, constants).

2. File Komponen React (.tsx):
Gunakan PascalCase (misalnya, Collapsible.tsx, ThemedText.tsx, HelloWave.tsx).
Satu komponen per file.

3. File Custom Hooks (.ts):
Gunakan awalan use diikuti dengan camelCase (misalnya, useColorScheme.ts, useThemeColor.ts).
Satu hook per file.

4. File Konstanta (.ts):
Gunakan PascalCase atau camelCase (misalnya, Colors.ts).
Kelompokkan konstanta yang berhubungan dalam satu file.

5. File Skrip (.js atau .ts):
Gunakan kebab-case atau camelCase (misalnya, reset-project.js).


## Rekomendasi untuk Pengembangan dengan Cursor AI
- Konsistensi: Terapkan konvensi penamaan dan struktur secara konsisten. Cursor AI akan lebih mudah memahami dan memberikan saran jika polanya jelas.
- Modularitas: Desain komponen agar independen dan dapat digunakan kembali.
Pisahkan logika kompleks menjadi custom hooks.
- Indeks File (index.ts):
Pertimbangkan untuk menambahkan file index.ts di dalam direktori components, hooks, dan constants untuk mengekspor semua modul dari direktori tersebut. Ini menyederhanakan path impor di file lain. Contoh (app/components/index.ts):
TypeScript

export * from './Collapsible';
export * from './ExternalLink';
export * from './HapticTab';
// ...dan seterusnya

- Path Alias: Jika proyek berkembang, konfigurasikan path alias di tsconfig.json (misalnya, @/components untuk app/components/) untuk impor yang lebih bersih. Cursor AI umumnya mendukung fitur ini dengan baik.


## Catatan Tambahan untuk Cursor AI
- Pastikan path dalam konfigurasi TypeScript (tsconfig.json) sudah benar dan mencerminkan bahwa app-example adalah basis pengembangan utama Anda, atau direktori mana pun yang menjadi root untuk source code yang di-compile.
- Jika menggunakan ESLint atau Prettier, pastikan konfigurasinya terintegrasi dengan baik di editor dan path yang di-lint sudah sesuai.

- Manfaatkan fitur navigasi dan refactoring Cursor AI. Dengan struktur yang jelas di dalam app-example, fitur-fitur ini akan sangat membantu.